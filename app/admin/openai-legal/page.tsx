"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Separator } from "@/components/ui/separator"
import { ExternalLink, Shield, FileText, CheckCircle, AlertTriangle, Bot, HelpCircle } from "lucide-react"
import { useHelpOverlay } from "@/hooks/use-help-overlay"
import { HelpOverlay } from "@/components/help/help-overlay"
import { openaiLegalHelpTooltips } from "@/lib/help/openai-legal-help"
import { LegalDocumentPreview } from "@/components/legal/LegalDocumentPreview"
import { registerSignatureRequest } from "@/lib/signature-tracking"

interface GeneratedDocument {
  contractType: string
  generatedAt: string
  status: string
  content: string
  tokens_used: number
  estimated_cost: string
  confidence: number
}

export default function OpenAILegalAdvisorPage() {
  const [contractType, setContractType] = useState("")
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedDocument, setGeneratedDocument] = useState<GeneratedDocument | null>(null)
  const { isHelpVisible, toggleHelp } = useHelpOverlay()

  useEffect(() => {
    console.log("Loaded external agent: OpenAI Legal Advisor")
  }, [])

  const contractTypes = [
    "Non-Disclosure Agreement (NDA)",
    "Service Agreement",
    "Employment Contract",
    "Vendor Agreement",
    "Partnership Agreement",
    "Software License Agreement",
    "Consulting Agreement",
    "Data Processing Agreement",
  ]

  const handleGenerateDraft = async () => {
    if (!contractType) {
      alert("Please select a contract type")
      return
    }

    setIsGenerating(true)
    setGeneratedDocument(null)

    // Simulate API call with delay
    setTimeout(() => {
      const mockResponse: GeneratedDocument = {
        contractType,
        generatedAt: new Date().toISOString(),
        status: "success",
        content: `# ${contractType}

## CONFIDENTIAL LEGAL DOCUMENT
Generated by OpenAI Legal Advisor on ${new Date().toLocaleDateString()}

### 1. PARTIES AND EFFECTIVE DATE
- **Party A**: [Company Name]
- **Party B**: [Counterparty Name]
- **Effective Date**: [To be specified]
- **Governing Law**: [Jurisdiction to be determined]

### 2. DEFINITIONS AND INTERPRETATION
For the purposes of this Agreement, the following terms shall have the meanings set forth below:

- **Confidential Information**: Any and all non-public, proprietary information
- **Disclosing Party**: The party providing Confidential Information
- **Receiving Party**: The party receiving Confidential Information

### 3. SCOPE OF AGREEMENT
This Agreement establishes the terms and conditions under which the parties will:

• Share confidential and proprietary information
• Maintain strict confidentiality obligations
• Protect intellectual property rights
• Establish clear usage guidelines

### 4. CONFIDENTIALITY OBLIGATIONS
The Receiving Party agrees to:

• Maintain all Confidential Information in strict confidence
• Use Confidential Information solely for the intended purpose
• Implement reasonable security measures
• Limit access to authorized personnel only

### 5. TERM AND TERMINATION
- **Initial Term**: [Duration to be specified]
- **Renewal**: Automatic renewal unless terminated
- **Termination Rights**: Either party may terminate with 30 days notice
- **Survival**: Confidentiality obligations survive termination

### 6. LIMITATION OF LIABILITY
Neither party shall be liable for indirect, incidental, or consequential damages arising from this Agreement.

### 7. DISPUTE RESOLUTION
Any disputes shall be resolved through binding arbitration in accordance with applicable rules.

### 8. COMPLIANCE NOTES
✅ GDPR compliance considerations included
✅ Standard indemnification clauses
✅ Force majeure provisions
⚠️ Requires legal review before execution
⚠️ Jurisdiction-specific modifications may be needed

### 9. NEXT STEPS
1. Review with internal legal counsel
2. Customize terms for specific use case
3. Obtain necessary approvals
4. Execute with appropriate signatures

*This document was generated by an AI system and should be reviewed by qualified legal professionals before use.*`,
        tokens_used: 1247,
        estimated_cost: "$0.025",
        confidence: 0.92,
      }

      setGeneratedDocument(mockResponse)
      setIsGenerating(false)

      // Register the document for signature tracking
      const projectName = contractType.includes("NDA")
        ? "TechCorp Partnership"
        : contractType.includes("Service")
          ? "Vendor Services Agreement"
          : contractType.includes("Employment")
            ? "Executive Hiring"
            : "Business Partnership"

      registerSignatureRequest({
        documentType: contractType.split(" ")[0] as "NDA" | "Contract" | "Policy" | "Budget",
        project: projectName,
        generatedBy: "OpenAI Legal Advisor",
        department: "Legal" as const,
        status: "pending" as const,
        dateGenerated: new Date().toISOString(),
        content: mockResponse.content,
        confidence: mockResponse.confidence,
        tokensUsed: mockResponse.tokens_used,
        estimatedCost: mockResponse.estimated_cost,
      })

      console.log("OpenAI Legal Advisor generated draft:", {
        type: contractType,
        tokens: mockResponse.tokens_used,
        cost: mockResponse.estimated_cost,
      })

      console.log("Document registered for CEO signature tracking:", {
        type: contractType,
        project: projectName,
        status: "pending",
      })
    }, 2000)
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-start justify-between">
        <div id="openai-legal-header" className="space-y-2">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-orange-100 rounded-lg">
              <Bot className="h-6 w-6 text-orange-600" />
            </div>
            <div>
              <h1 className="text-3xl font-bold">OpenAI Legal Advisor</h1>
              <p className="text-lg text-muted-foreground">External AI for contract review and compliance support</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Badge variant="outline" className="text-orange-600 border-orange-200">
              <ExternalLink className="h-3 w-3 mr-1" />
              External Agent
            </Badge>
            <Badge variant="secondary">Powered by OpenAI</Badge>
            <Badge variant="outline" className="text-green-600 border-green-200">
              <CheckCircle className="h-3 w-3 mr-1" />
              Active
            </Badge>
          </div>
        </div>

        {/* Help Toggle Button */}
        <Button
          variant="outline"
          size="sm"
          onClick={toggleHelp}
          className={`${isHelpVisible ? "bg-blue-50 border-blue-200" : ""}`}
        >
          <HelpCircle className="h-4 w-4 mr-2" />
          {isHelpVisible ? "Hide Help" : "Show Help"}
        </Button>
      </div>

      {/* Description */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5 text-blue-600" />
            Agent Overview
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="prose prose-sm max-w-none">
            <p className="text-muted-foreground leading-relaxed">
              This third-party agent is provided by OpenAI and integrated into the Ephrya ecosystem. It supports NDA
              generation, compliance checks, and contract structuring. The agent operates under strict governance
              controls and is monitored by Eve for usage, costs, and compliance.
            </p>
          </div>

          <Separator className="my-4" />

          <div id="governance-info" className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <h4 className="font-medium text-foreground mb-1">Capabilities</h4>
              <ul className="text-muted-foreground space-y-1">
                <li>• Contract drafting</li>
                <li>• Compliance analysis</li>
                <li>• Legal research</li>
                <li>• Risk assessment</li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium text-foreground mb-1">Access Level</h4>
              <p className="text-muted-foreground">Internal Legal</p>
              <p className="text-xs text-muted-foreground mt-1">Restricted to legal department</p>
            </div>
            <div>
              <h4 className="font-medium text-foreground mb-1">Governance</h4>
              <ul className="text-muted-foreground space-y-1">
                <li>• Eve monitoring: ✅</li>
                <li>• Isolated access: ✅</li>
                <li>• Token budget: 5,000/month</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Action Panel */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5 text-green-600" />
            Generate Legal Draft
          </CardTitle>
          <CardDescription>Select a contract type and generate a legal document template</CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div id="contract-type-selector">
              <label htmlFor="contract-type" className="text-sm font-medium mb-2 block">
                Contract Type
              </label>
              <Select value={contractType} onValueChange={setContractType}>
                <SelectTrigger>
                  <SelectValue placeholder="Select contract type" />
                </SelectTrigger>
                <SelectContent>
                  {contractTypes.map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div className="flex items-end">
              <Button
                id="generate-draft-button"
                onClick={handleGenerateDraft}
                disabled={!contractType || isGenerating}
                className="w-full bg-orange-600 hover:bg-orange-700"
              >
                {isGenerating ? "Generating..." : "Generate Legal Draft"}
              </Button>
            </div>
          </div>

          {/* Warning Notice */}
          <div className="flex items-start gap-3 p-4 bg-amber-50 border border-amber-200 rounded-lg">
            <AlertTriangle className="h-5 w-5 text-amber-600 mt-0.5 flex-shrink-0" />
            <div className="text-sm">
              <p className="font-medium text-amber-800">Legal Disclaimer</p>
              <p className="text-amber-700 mt-1">
                AI-generated legal documents require review by qualified legal professionals before use. This tool
                provides templates and guidance but does not constitute legal advice.
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Generated Document Preview */}
      {generatedDocument && (
        <LegalDocumentPreview
          contractType={generatedDocument.contractType}
          content={generatedDocument.content}
          generatedAt={generatedDocument.generatedAt}
          confidence={generatedDocument.confidence}
          tokensUsed={generatedDocument.tokens_used}
          estimatedCost={generatedDocument.estimated_cost}
        />
      )}

      {/* Usage Stats */}
      <Card id="usage-stats">
        <CardHeader>
          <CardTitle className="text-lg">Usage Statistics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-center">
            <div className="p-4 bg-blue-50 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">23</div>
              <div className="text-sm text-muted-foreground">Documents Generated</div>
            </div>
            <div className="p-4 bg-green-50 rounded-lg">
              <div className="text-2xl font-bold text-green-600">$12.45</div>
              <div className="text-sm text-muted-foreground">Monthly Cost</div>
            </div>
            <div className="p-4 bg-orange-50 rounded-lg">
              <div className="text-2xl font-bold text-orange-600">2,847</div>
              <div className="text-sm text-muted-foreground">Tokens Used</div>
            </div>
            <div className="p-4 bg-purple-50 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">94%</div>
              <div className="text-sm text-muted-foreground">Success Rate</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Help Overlays */}
      {isHelpVisible && openaiLegalHelpTooltips.map((tooltip) => <HelpOverlay key={tooltip.anchorId} {...tooltip} />)}
    </div>
  )
}

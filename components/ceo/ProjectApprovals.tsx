"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Badge } from "@/components/ui/badge"
import { ScrollArea } from "@/components/ui/scroll-area"
import { CheckCircle, FileText, Calendar, User, Target } from "lucide-react"
import { PlanApprovalCard } from "./PlanApprovalCard"
import { PocApprovalCard } from "./PocApprovalCard"
import type { ProjectApproval } from "@/mock/ceo-approvals"

interface ProjectApprovalsProps {
  approvals: ProjectApproval[]
  onApprovalUpdate: (id: string, status: "Approved" | "Rejected") => void
  onEphryaMessage: (message: string) => void
  className?: string
}

export function ProjectApprovals({ approvals, onApprovalUpdate, onEphryaMessage, className }: ProjectApprovalsProps) {
  const [statusFilter, setStatusFilter] = useState<string>("All")
  const [selectedApproval, setSelectedApproval] = useState<ProjectApproval | null>(null)
  const [isPreviewOpen, setIsPreviewOpen] = useState(false)

  const filteredApprovals =
    statusFilter === "All" ? approvals : approvals.filter((approval) => approval.status === statusFilter)

  const handlePreview = (approval: ProjectApproval) => {
    setSelectedApproval(approval)
    setIsPreviewOpen(true)
  }

  const handleApprove = (id: string) => {
    const approval = approvals.find((a) => a.id === id)
    if (approval) {
      onApprovalUpdate(id, "Approved")
      onEphryaMessage(`You approved ${approval.agent}'s ${approval.type.toLowerCase()} for ${approval.projectName}.`)
      console.log(`CEO approved ${approval.agent}'s plan for ${approval.projectName}`)
    }
  }

  const handleReject = (id: string) => {
    const approval = approvals.find((a) => a.id === id)
    if (approval) {
      onApprovalUpdate(id, "Rejected")
      onEphryaMessage(`You rejected ${approval.agent}'s ${approval.type.toLowerCase()} for ${approval.projectName}.`)
      console.log(`CEO rejected ${approval.agent}'s plan for ${approval.projectName}`)
    }
  }

  const pendingCount = approvals.filter((a) => a.status === "Awaiting Approval").length

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="flex items-center gap-2 text-cyan-400">
              <FileText className="h-5 w-5" />
              Project Approvals ({pendingCount} pending)
            </CardTitle>
            <p className="text-sm text-blue-300 mt-1">Review and approve deliverables generated by Ada and Max</p>
          </div>
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-48 bg-slate-800/50 border-slate-600/40 text-blue-300">
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent className="bg-[#0f1a2c]/95 border border-cyan-500/20">
              <SelectItem value="All">All Status</SelectItem>
              <SelectItem value="Awaiting Approval">Awaiting Approval</SelectItem>
              <SelectItem value="Approved">Approved</SelectItem>
              <SelectItem value="Rejected">Rejected</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredApprovals.map((approval) =>
            approval.type === "Project Plan" ? (
              <PlanApprovalCard
                key={approval.id}
                approval={approval}
                onPreview={handlePreview}
                onApprove={handleApprove}
                onReject={handleReject}
              />
            ) : (
              <PocApprovalCard
                key={approval.id}
                approval={approval}
                onPreview={handlePreview}
                onApprove={handleApprove}
                onReject={handleReject}
              />
            ),
          )}
        </div>

        {filteredApprovals.length === 0 && (
          <div className="text-center py-12 text-blue-300">
            <CheckCircle className="h-12 w-12 mx-auto mb-4 text-cyan-400/50" />
            <p>No {statusFilter === "All" ? "" : statusFilter.toLowerCase()} approvals found</p>
          </div>
        )}

        {/* Preview Modal */}
        <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>
          <DialogContent className="max-w-4xl max-h-[80vh] border border-cyan-500/20 text-white">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2 text-cyan-400">
                <FileText className="h-5 w-5" />
                {selectedApproval?.projectName}
              </DialogTitle>
            </DialogHeader>

            {selectedApproval && (
              <div className="space-y-4">
                {/* Metadata */}
                <div className="flex flex-wrap gap-4 p-4 bg-slate-800/50 border border-slate-700/40 rounded-lg">
                  <div className="flex items-center gap-2 text-sm">
                    <User className="h-4 w-4" />
                    <span className="font-medium text-cyan-400">Agent:</span>
                    <Badge className="bg-slate-700/50 text-blue-300 border border-slate-600/40">
                      {selectedApproval.agent}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <Calendar className="h-4 w-4" />
                    <span className="font-medium text-cyan-400">Generated:</span>
                    <span className="text-blue-300">
                      {new Date(selectedApproval.generatedDate).toLocaleDateString()}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <Target className="h-4 w-4" />
                    <span className="font-medium text-cyan-400">Type:</span>
                    <Badge className="bg-blue-500/20 text-blue-400 border border-blue-500/30">
                      {selectedApproval.type}
                    </Badge>
                  </div>
                </div>

                {/* Source Inputs */}
                <div>
                  <h4 className="font-medium mb-2 text-cyan-400">Source Inputs:</h4>
                  <ul className="list-disc list-inside text-sm text-blue-300 space-y-1">
                    {selectedApproval.sourceInputs.map((input, index) => (
                      <li key={index}>{input}</li>
                    ))}
                  </ul>
                </div>

                {/* Content */}
                <div>
                  <h4 className="font-medium mb-2 text-cyan-400">Content:</h4>
                  <ScrollArea className="h-96 w-full border border-slate-700/40 rounded-lg p-4 bg-slate-800/30">
                    <pre className="whitespace-pre-wrap text-sm font-mono text-blue-200">
                      {selectedApproval.content}
                    </pre>
                  </ScrollArea>
                </div>

                {/* Action Buttons */}
                {selectedApproval.status === "Awaiting Approval" && (
                  <div className="flex gap-2 pt-4 border-t border-slate-700/40">
                    <Button
                      onClick={() => {
                        handleApprove(selectedApproval.id)
                        setIsPreviewOpen(false)
                      }}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      Approve
                    </Button>
                    <Button
                      variant="destructive"
                      onClick={() => {
                        handleReject(selectedApproval.id)
                        setIsPreviewOpen(false)
                      }}
                      className="bg-red-600 hover:bg-red-700"
                    >
                      Reject
                    </Button>
                  </div>
                )}
              </div>
            )}
          </DialogContent>
        </Dialog>
      </CardContent>
    </Card>
  )
}
